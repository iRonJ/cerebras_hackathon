@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject cerebras_os.Services.OpenRouterService OpenRouterService
@inject cerebras_os.Services.UserSessionState SessionState
@inject IJSRuntime JS

<PageTitle>Desktop</PageTitle>


<div id="stage" style="position:relative; width:800px; height:500px; border:1px solid #ccc;">
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table draggable" style="left:20px; top:20px">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
  <svg id="icon"    class="draggable" width="80" height="80" style="left:350px; top:100px"
       viewBox="0 0 100 100">
    <circle cx="50" cy="50" r="40" fill="tomato"/>
  </svg>
  <button class="draggable" @onclick="async () =>await OnSave4Click()">click
</button>

<div class="draggable"> 
@(apiResult != null ? (MarkupString)apiResult : null)</div>
</div>


@code 
{
    private WeatherForecast[]? forecasts;

    private string? apiResult;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

    }    
    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
    private async Task OnSave4Click()
    {
        try
        {
            // Only send public/allowed session state to the LLM
            var sessionDict = SessionState.Objects.ToDictionary(kv => kv.Key, kv => kv.Value.ContextText);
            sessionDict.Add("Current HTML of the widget. Please reuse it if it's good", apiResult);
            var content = await OpenRouterService.GetChatCompletionWithContextAsync("What's the weather in raleigh?", sessionDict);
            apiResult = content["HTMLText"].ToString() ?? "No valid response.";
            // Optionally, parse and update session state as before
            if(content["liveData"].ToString().ToLower() == "true")
            {
                SessionState.AddOrUpdate("What's the weather in raleigh?", new cerebras_os.Services.SessionObject()
                {
                    PromptText = content["prompt"].ToString(),
                    NeedsUpdate = true,
                    LiveData= true,
                    ContextText = content["HTMLText"].ToString() ?? "No valid response."
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
            await JS.InvokeVoidAsync("makeDraggable", ".draggable");
    }

}
