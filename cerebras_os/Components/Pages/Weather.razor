@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject cerebras_os.Services.OpenRouterService OpenRouterService
@inject cerebras_os.Services.UserSessionState SessionState
@inject IJSRuntime JS

<PageTitle>Desktop</PageTitle>

<div style="display:flex; align-items:center; margin-bottom:10px;">
    <button @onclick="ShowAddAppletInput">Add Applet</button>
    @if (showAppletInput)
    {
        <input @bind="newAppletPrompt" @bind:event="oninput" placeholder="What do you want to see?" style="margin-left:10px;" />
        <button @onclick="AddApplet">OK</button>
        <button @onclick="CancelAddApplet" style="margin-left:5px;">Cancel</button>
    }
</div>

<div id="stage" style="position:relative; width:100%; height:100%; border:1px solid #ccc;">

    @foreach (var widget in widgets)
    {
        <div class="draggable widget-outer" id="@widget.Key" style="position:absolute; left:100px; top:@(150 + widgets.Keys.ToList().IndexOf(widget.Key)*120)px; min-width:200px; min-height:80px; background:#f9f9f9; border:1px solid #ccc; padding:2px; z-index:10;">
            <div class="widget-titlebar" data-drag-parent style="display:flex; justify-content:space-between; align-items:center; position:relative; cursor:move; user-select:none;">
                @if (widget.Value.LiveData)
                {
                    <span style="position:absolute; left:-6px; top:-6px; width:20px; height:20px;">
                        <svg width="18" height="18" viewBox="0 0 20 20" style="vertical-align:middle;"><polygon points="10,1 4,11 9,11 7,19 16,7 11,7 13,1" fill="#f7c948" stroke="#e6b400" stroke-width="1.5"/></svg>
                    </span>
                }
                <span style="cursor:pointer; color:#b00; font-size:18px; margin-left:8px;" title="Close" @onclick="() => RemoveWidget(widget.Key)">×</span>
            </div>git 
            <div>@((MarkupString)widget.Value.Html)</div>
            <div style="position:absolute; right:2px; bottom:2px; width:18px; height:18px; cursor:nwse-resize; opacity:0.6;" class="resize-handle" title="Resize">
                <svg width="18" height="18"><polyline points="4,18 18,18 18,4" style="fill:none;stroke:#888;stroke-width:2" /></svg>
            </div>
        </div>
    }
</div>

@code {
    private WeatherForecast[]? forecasts;

    private string? apiResult;
    private bool isLoading = false;
    private bool showAppletInput = false;
    private string newAppletPrompt = string.Empty;

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
    private class WidgetInfo
    {
        public string PromptText { get; set; } = string.Empty;
        public string Html { get; set; } = string.Empty;
        public bool LiveData { get; set; } = false;
    }
    private Dictionary<string, WidgetInfo> widgets = new();
    private CancellationTokenSource? _liveUpdateCts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        StartLiveUpdateLoop();
    }    

    private void StartLiveUpdateLoop()
    {
        _liveUpdateCts = new CancellationTokenSource();
        _ = Task.Run(async () =>
        {
            while (!_liveUpdateCts.IsCancellationRequested)
            {
                foreach (var widget in widgets.Where(w => w.Value.LiveData).ToList())
                {
                    var id = widget.Key;
                    var info = widget.Value;
                    var sessionDict = SessionState.Objects.ToDictionary(kv => kv.Key, kv => kv.Value.ContextText);
                    string? existingHtml = info.Html;
                    if (!string.IsNullOrEmpty(existingHtml))
                        sessionDict["Current HTML of the widget. Please reuse it if it's good"] = existingHtml;
                    int retries = 0;
                    Exception? lastEx = null;
                    while (retries < 3)
                    {
                        try
                        {
                            var content = await OpenRouterService.GetChatCompletionWithContextAsync(info.PromptText, sessionDict);
                            var html = content["HTMLText"].ToString() ?? "No valid response.";
                            widgets[id].Html = html;
                            if(content["liveData"].ToString().ToLower() == "true"){
                                widgets[id].LiveData = true;
                                SessionState.AddOrUpdate(info.PromptText, new cerebras_os.Services.SessionObject
                                {
                                    PromptText = info.PromptText,
                                    NeedsUpdate = true,
                                    LiveData = true,
                                    ContextText = html
                                });
                            }
                            else{
                                widgets[id].LiveData = false;
                                SessionState.AddOrUpdate(info.PromptText, new cerebras_os.Services.SessionObject
                                {
                                    PromptText = info.PromptText,
                                    NeedsUpdate = true,
                                    LiveData = false,
                                    ContextText = html
                                });
                            }

                            await InvokeAsync(StateHasChanged);
                            break;
                        }
                        catch (Exception ex)
                        {
                            lastEx = ex;
                            retries++;
                            await Task.Delay(500 * retries);
                        }
                    }
                    if (retries == 3)
                    {
                        widgets[id].Html = $"Error: {lastEx?.Message}";
                        await InvokeAsync(StateHasChanged);
                    }
                }
                await Task.Delay(3000, _liveUpdateCts.Token);
            }
        }, _liveUpdateCts.Token);
    }

    private async Task OnSave4Click()
    {
        try
        {
            // Only send public/allowed session state to the LLM
            var sessionDict = SessionState.Objects.ToDictionary(kv => kv.Key, kv => kv.Value.ContextText);
            sessionDict.Add("Current HTML of the widget. Please reuse it if it's good", apiResult);
            var content = await OpenRouterService.GetChatCompletionWithContextAsync("What's the weather in raleigh?", sessionDict);
            apiResult = content["HTMLText"].ToString() ?? "No valid response.";
            // Optionally, parse and update session state as before
            if(content["liveData"].ToString().ToLower() == "true")
            {
                SessionState.AddOrUpdate("What's the weather in raleigh?", new cerebras_os.Services.SessionObject()
                {
                    PromptText = content["prompt"].ToString(),
                    NeedsUpdate = true,
                    LiveData= true,
                    ContextText = content["HTMLText"].ToString() ?? "No valid response."
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    private void ShowAddAppletInput() { showAppletInput = true; }
    private void CancelAddApplet() { showAppletInput = false; newAppletPrompt = string.Empty; }

    private async Task AddApplet()
    {
        if (string.IsNullOrWhiteSpace(newAppletPrompt)) return;
        showAppletInput = false;
        var sessionDict = SessionState.Objects.ToDictionary(kv => kv.Key, kv => kv.Value.ContextText);
        string? existingHtml = widgets.Values.FirstOrDefault(w => w.PromptText == newAppletPrompt)?.Html;
        if (!string.IsNullOrEmpty(existingHtml))
            sessionDict.Add("Current HTML of the widget. Please reuse it if it's good", existingHtml);
        int retries = 0;
        Exception? lastEx = null;
        while (retries < 3)
        {
            try
            {
                var content = await OpenRouterService.GetChatCompletionWithContextAsync(newAppletPrompt, sessionDict);
                var html = content["HTMLText"].ToString() ?? "No valid response.";
                var prompt = content["prompt"].ToString() ?? newAppletPrompt;
                var live = (content["liveData"].ToString() ?? "false").ToLower() == "true";
                var id = $"widget_{Guid.NewGuid().ToString("N").Substring(0,8)}";
                widgets[id] = new WidgetInfo { PromptText = prompt, Html = html, LiveData = live };
                if (live)
                {
                    SessionState.AddOrUpdate(prompt, new cerebras_os.Services.SessionObject
                    {
                        PromptText = prompt,
                        NeedsUpdate = true,
                        LiveData = true,
                        ContextText = html
                    });
                }
                newAppletPrompt = string.Empty;
                StateHasChanged();
                return;
            }
            catch (Exception ex)
            {
                lastEx = ex;
                retries++;
                await Task.Delay(500 * retries); // Exponential backoff
            }
        }
        // If we get here, all retries failed
        var failId = $"widget_{Guid.NewGuid().ToString("N").Substring(0,8)}";
        widgets[failId] = new WidgetInfo { PromptText = newAppletPrompt, Html = $"Error: {lastEx?.Message}", LiveData = false };
        newAppletPrompt = string.Empty;
        StateHasChanged();
    }
    private void RemoveWidget(string id)
    {
        widgets.Remove(id);
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("makeDraggable", ".widget-titlebar[data-drag-parent]");
    }

    public void Dispose()
    {
        _liveUpdateCts?.Cancel();
        _liveUpdateCts?.Dispose();
    }
}
